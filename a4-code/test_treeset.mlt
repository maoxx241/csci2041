open Printf;;
open Mltest;;


(* files for diffing *)
let actual_file = "test-data/actual.tmp";;
let expect_file = "test-data/expect.tmp";;
let diff_file   = "test-data/diff.tmp"  ;;
let msgref = ref "";;

let str_of_opt to_string o =
  match o with
  | None -> "None"
  | Some x -> sprintf "Some %s" (to_string x)
;;

let str_of_fopt = str_of_opt string_of_float;;

let make_getopt_msg key mapstr expect actual =
  let lines = [
      sprintf "Key:    %s" key;
      sprintf "EXPECT: %s" expect;
      sprintf "ACTUAL: %s" actual;
      sprintf "Tree String for Map:\n%s" mapstr;
    ]
  in
  String.concat "\n" lines
;;

let make_iterfold_msg mapstr funcstr expect actual =
  let lines = [
      sprintf "%s" funcstr;
      sprintf "EXPECT: %s" expect;
      sprintf "ACTUAL: %s" actual;
      sprintf "Tree String for Map:\n%s" mapstr;
    ]
  in
  String.concat "\n" lines
;;

let make_remove_msg key original_str =
  let lines = [
      sprintf "REMOVAL PRODUCES WRONG TREE";
      sprintf "- Remove Key: %s" key;
      sprintf "- Original Tree:";
      sprintf "%s\n" original_str;
    ] in
  String.concat "\n" lines
;;

Mltest.main [|
(******************************************)
(* treeset.ml tests *)

(fun () ->
  (* basic functionality, empty + add + tree_string *)
  let module FloatType = struct
      type element = float;;
      let compare = Pervasives.compare;;
      let elem_string f = sprintf "%.4f" f;;
    end
  in
  let module FS = Treeset.Make(FloatType) in

  (* BEG_TEST *)
  let set = FS.empty in
  let set = FS.add set 5.5 in
  let actual_str = FS.tree_string set in
  let expect_str = "
 0: 5.5000
" 
  in
if not ( ( check_diff ~expect_str expect_file ~actual_str actual_file diff_file msgref )) then raise (TestFail {loc="test_treeset.ml:73"; msg=(!msgref); code="66:  let set = FS.empty in\n67:  let set = FS.add set 5.5 in\n68:  let actual_str = FS.tree_string set in\n69:  let expect_str = \"\n70: 0: 5.5000\n71:\" \n72:  in\n73:  __check_output__ ( check_diff  ~expect_str expect_file ~actual_str actual_file diff_file msgref );\n"}) else ();
  (* END_TEST *)
);

(fun () ->
  (* basic functionality, empty + add + tree_string *)
  let module FloatType = struct
      type element = float;;
      let compare = Pervasives.compare;;
      let elem_string = string_of_float;;
    end
  in
  let module FS = Treeset.Make(FloatType) in
  let fset =
    let elems = [5.5; 8.2; 12.6; 9.4; 2.1; 4.5; 7.6; 1.9; 3.3; 3.6; 3.9; 3.1; 4.98] in
    List.fold_left FS.add FS.empty elems
  in
  let fsetstr = FS.tree_string fset in

  (* BEG_TEST *)
  let el = 2.1 in
  let actual = FS.getopt fset el in
  let expect = Some 2.1 in
  let msg = make_getopt_msg (string_of_float el) fsetstr (str_of_fopt expect) (str_of_fopt actual) in
if not ( ( expect = actual )) then raise (TestFail {loc="test_treeset.ml:97"; msg=msg; code="93:  let el = 2.1 in\n94:  let actual = FS.getopt fset el in\n95:  let expect = Some 2.1 in\n96:  let msg = make_getopt_msg (string_of_float el) fsetstr (str_of_fopt expect) (str_of_fopt actual) in\n97:  __check__ ( expect = actual );\n"}) else ();
  (* END_TEST *)

  (* BEG_TEST *)
  let el = 6.66 in
  let actual = FS.getopt fset el in
  let expect = None in
  let msg = make_getopt_msg (string_of_float el) fsetstr (str_of_fopt expect) (str_of_fopt actual) in
if not ( ( expect = actual )) then raise (TestFail {loc="test_treeset.ml:105"; msg=msg; code="101:  let el = 6.66 in\n102:  let actual = FS.getopt fset el in\n103:  let expect = None in\n104:  let msg = make_getopt_msg (string_of_float el) fsetstr (str_of_fopt expect) (str_of_fopt actual) in\n105:  __check__ ( expect = actual );\n"}) else ();
  (* END_TEST *)

);

(fun () ->
  (* basic functionality, empty + add + tree_string *)
  let module FloatType = struct
      type element = float;;
      let compare = Pervasives.compare;;
      let elem_string = string_of_float;;
    end
  in
  let module FS = Treeset.Make(FloatType) in
  let fset =
    let elems = [5.5; 8.2; 12.6; 9.4; 2.1; 4.5; 7.6; 1.9; 3.3; 3.6; 3.9; 3.1; 4.98] in
    List.fold_left FS.add FS.empty elems
  in
  let fsetstr = FS.tree_string fset in

  (* BEG_TEST *)
  let el = 4.98 in
  let actual = FS.getopt fset el in
  let expect = Some 4.98 in
  let msg = make_getopt_msg (string_of_float el) fsetstr (str_of_fopt expect) (str_of_fopt actual) in
if not ( ( expect = actual )) then raise (TestFail {loc="test_treeset.ml:130"; msg=msg; code="126:  let el = 4.98 in\n127:  let actual = FS.getopt fset el in\n128:  let expect = Some 4.98 in\n129:  let msg = make_getopt_msg (string_of_float el) fsetstr (str_of_fopt expect) (str_of_fopt actual) in\n130:  __check__ ( expect = actual );\n"}) else ();
  (* END_TEST *)

  (* BEG_TEST *)
  let el = 8.2 in
  let actual = FS.contains fset el in
  let expect = true in
  let msg = make_getopt_msg (string_of_float el) fsetstr (string_of_bool expect) (string_of_bool actual) in
if not ( ( expect = actual )) then raise (TestFail {loc="test_treeset.ml:138"; msg=msg; code="134:  let el = 8.2 in\n135:  let actual = FS.contains fset el in\n136:  let expect = true in\n137:  let msg = make_getopt_msg (string_of_float el) fsetstr (string_of_bool expect) (string_of_bool actual) in\n138:  __check__ ( expect = actual );\n"}) else ();
  (* END_TEST *)

  (* BEG_TEST *)
  let el = 7.64 in
  let actual = FS.contains fset el in
  let expect = false in
  let msg = make_getopt_msg (string_of_float el) fsetstr (string_of_bool expect) (string_of_bool actual) in
if not ( ( expect = actual )) then raise (TestFail {loc="test_treeset.ml:146"; msg=msg; code="142:  let el = 7.64 in\n143:  let actual = FS.contains fset el in\n144:  let expect = false in\n145:  let msg = make_getopt_msg (string_of_float el) fsetstr (string_of_bool expect) (string_of_bool actual) in\n146:  __check__ ( expect = actual );\n"}) else ();
  (* END_TEST *)

);

(fun () ->
  (* iter *)
  let module ISType = struct
      type element = int * string;;
      let compare = Pervasives.compare;;
      let elem_string (i,s) = sprintf "(%d, %s)" i s;;
    end
  in
  let module ISSet = Treeset.Make(ISType) in
  let isset =
    let els = [5,"odd"; 8,"even"; 12,"even"; 9,"odd"; 2,"even"; 4,"even"; 7,"odd"; 1,"odd"] in
    List.fold_left ISSet.add ISSet.empty els
  in
  let issetstr = ISSet.tree_string isset in

  (* BEG_TEST *)
  let str = ref "" in
  let concat_els (i,s) = str := !str ^ (sprintf "%d is %s " i s) in
  let funcstr = "concatenate all int/strin pairs in a ref" in
  ISSet.iter concat_els isset;
  let expect = "1 is odd 2 is even 4 is even 5 is odd 7 is odd 8 is even 9 is odd 12 is even " in
  let actual = !str in
  let msg = make_iterfold_msg issetstr funcstr expect actual in
if not ( ( expect = actual )) then raise (TestFail {loc="test_treeset.ml:174"; msg=msg; code="167:  let str = ref \"\" in\n168:  let concat_els (i,s) = str := !str ^ (sprintf \"%d is %s \" i s) in\n169:  let funcstr = \"concatenate all int/strin pairs in a ref\" in\n170:  ISSet.iter concat_els isset;\n171:  let expect = \"1 is odd 2 is even 4 is even 5 is odd 7 is odd 8 is even 9 is odd 12 is even \" in\n172:  let actual = !str in\n173:  let msg = make_iterfold_msg issetstr funcstr expect actual in\n174:  __check__ ( expect = actual );\n"}) else ();
  (* END_TEST *)
);

(fun () ->
  (* fold *)
  let module ISType = struct
      type element = int * string;;
      let compare = Pervasives.compare;;
      let elem_string (i,s) = sprintf "(%d, %s)" i s;;
    end
  in
  let module ISSet = Treeset.Make(ISType) in
  let isset =
    let els = [5,"odd"; 8,"even"; 12,"even"; 9,"odd"; 2,"even"; 4,"even"; 7,"odd"; 1,"odd"] in
    List.fold_left ISSet.add ISSet.empty els
  in
  let issetstr = ISSet.tree_string isset in

  (* BEG_TEST *)
  let accum_kv (ksum,vcat) (k,v) = (ksum+k, (vcat^v^" ")) in
  let funcstr = "sums keys, concatenates value strings" in
  let (ksum,vcat) = ISSet.fold accum_kv (0,"") isset in
  let actual = ksum in
  let expect = 48 in
  let msg = make_iterfold_msg issetstr funcstr (string_of_int expect) (string_of_int actual) in
if not ( ( expect = actual )) then raise (TestFail {loc="test_treeset.ml:200"; msg=msg; code="194:  let accum_kv (ksum,vcat) (k,v) = (ksum+k, (vcat^v^\" \")) in\n195:  let funcstr = \"sums keys, concatenates value strings\" in\n196:  let (ksum,vcat) = ISSet.fold accum_kv (0,\"\") isset in\n197:  let actual = ksum in\n198:  let expect = 48 in\n199:  let msg = make_iterfold_msg issetstr funcstr (string_of_int expect) (string_of_int actual) in\n200:  __check__ ( expect = actual );\n"}) else ();
  let actual = vcat in
  let expect = "odd even even odd odd even odd even " in
  let msg = make_iterfold_msg issetstr funcstr expect actual in
if not ( ( expect = actual )) then raise (TestFail {loc="test_treeset.ml:204"; msg=msg; code="194:  let accum_kv (ksum,vcat) (k,v) = (ksum+k, (vcat^v^\" \")) in\n195:  let funcstr = \"sums keys, concatenates value strings\" in\n196:  let (ksum,vcat) = ISSet.fold accum_kv (0,\"\") isset in\n197:  let actual = ksum in\n198:  let expect = 48 in\n199:  let msg = make_iterfold_msg issetstr funcstr (string_of_int expect) (string_of_int actual) in\n200:  __check__ ( expect = actual );\n201:  let actual = vcat in\n202:  let expect = \"odd even even odd odd even odd even \" in\n203:  let msg = make_iterfold_msg issetstr funcstr expect actual in\n204:  __check__ ( expect = actual );\n"}) else ();
  (* END_TEST *)
);

(fun () ->
  (* to_string *)
  let module ISType = struct
      type element = int * string;;
      let compare = Pervasives.compare;;
      let elem_string (i,s) = sprintf "(%d, %s)" i s;;
    end
  in
  let module ISSet = Treeset.Make(ISType) in
  let isset =
    let els = [5,"odd"; 8,"even"; 12,"even"; 9,"odd"; 2,"even"; 4,"even"; 7,"odd"; 1,"odd"] in
    List.fold_left ISSet.add ISSet.empty els
  in

  (* BEG_TEST *)
  let actual = ISSet.to_string ISSet.empty in
  let expect = "[]" in
  let msg = sprintf "to_string incorrect\nEXPECT: %s\nACTUAL: %s\n" expect actual in
if not ( ( expect = actual )) then raise (TestFail {loc="test_treeset.ml:226"; msg=msg; code="223:  let actual = ISSet.to_string ISSet.empty in\n224:  let expect = \"[]\" in\n225:  let msg = sprintf \"to_string incorrect\\nEXPECT: %s\\nACTUAL: %s\\n\" expect actual in\n226:  __check__ ( expect = actual );\n"}) else ();
  (* END_TEST *)

  (* BEG_TEST *)
  let actual = ISSet.to_string isset in
  let expect = "[(1, odd), (2, even), (4, even), (5, odd), (7, odd), (8, even), (9, odd), (12, even)]" in
  let msg = sprintf "to_string incorrect\nEXPECT: %s\nACTUAL: %s\n" expect actual in
if not ( ( expect = actual )) then raise (TestFail {loc="test_treeset.ml:233"; msg=msg; code="230:  let actual = ISSet.to_string isset in\n231:  let expect = \"[(1, odd), (2, even), (4, even), (5, odd), (7, odd), (8, even), (9, odd), (12, even)]\" in\n232:  let msg = sprintf \"to_string incorrect\\nEXPECT: %s\\nACTUAL: %s\\n\" expect actual in\n233:  __check__ ( expect = actual );\n"}) else ();
  (* END_TEST *)

);

(fun () ->
  (* remove *)
  let module SIType = struct
      type element = string * int;;
      let compare = Pervasives.compare;;
      let elem_string (s,i) = sprintf "%s is %d" s i;;
    end
  in
  let module SISet = Treeset.Make(SIType) in
  let siset =
    let els = ["seven",7; "two",2; "five",5; "one",1; "nine",9; "twelve",12; "eight",8] in
    List.fold_left SISet.add SISet.empty els
  in
  let siset_str = SISet.tree_string siset in

  (* BEG_TEST *)
  let (s,i) as el = ("ten",10) in
  let initmsg = make_remove_msg (sprintf "(%s,%d)" s i) siset_str in
  let actual_str = (SISet.tree_string (SISet.remove siset el)) in
  let expect_str = "
   1: two is 2
     2: twelve is 12
 0: seven is 7
     2: one is 1
       3: nine is 9
   1: five is 5
     2: eight is 8
"
  in
if not ( ( check_diff ~expect_str expect_file ~actual_str actual_file diff_file ~initmsg msgref )) then raise (TestFail {loc="test_treeset.ml:267"; msg=(!msgref); code="254:  let (s,i) as el = (\"ten\",10) in\n255:  let initmsg = make_remove_msg (sprintf \"(%s,%d)\" s i) siset_str in\n256:  let actual_str = (SISet.tree_string (SISet.remove siset el)) in\n257:  let expect_str = \"\n258:   1: two is 2\n259:     2: twelve is 12\n260: 0: seven is 7\n261:     2: one is 1\n262:       3: nine is 9\n263:   1: five is 5\n264:     2: eight is 8\n265:\"\n266:  in\n267:  __check_output__ ( check_diff  ~expect_str expect_file ~actual_str actual_file diff_file ~initmsg msgref );\n"}) else ();
  (* END_TEST *)

  (* BEG_TEST *)
  let (s,i) as el = ("one",1) in
  let initmsg = make_remove_msg (sprintf "(%s,%d)" s i) siset_str in
  let actual_str = (SISet.tree_string (SISet.remove siset el)) in
  let expect_str = "
   1: two is 2
     2: twelve is 12
 0: seven is 7
     2: nine is 9
   1: five is 5
     2: eight is 8
"
  in
if not ( ( check_diff ~expect_str expect_file ~actual_str actual_file diff_file ~initmsg msgref )) then raise (TestFail {loc="test_treeset.ml:283"; msg=(!msgref); code="271:  let (s,i) as el = (\"one\",1) in\n272:  let initmsg = make_remove_msg (sprintf \"(%s,%d)\" s i) siset_str in\n273:  let actual_str = (SISet.tree_string (SISet.remove siset el)) in\n274:  let expect_str = \"\n275:   1: two is 2\n276:     2: twelve is 12\n277: 0: seven is 7\n278:     2: nine is 9\n279:   1: five is 5\n280:     2: eight is 8\n281:\"\n282:  in\n283:  __check_output__ ( check_diff  ~expect_str expect_file ~actual_str actual_file diff_file ~initmsg msgref );\n"}) else ();
  (* END_TEST *)
);

(fun () ->
  (* remove *)
  let module SIType = struct
      type element = string * int;;
      let compare = Pervasives.compare;;
      let elem_string (s,i) = sprintf "%s is %d" s i;;
    end
  in
  let module SISet = Treeset.Make(SIType) in
  let siset =
    let els = ["seven",7; "two",2; "five",5; "one",1; "nine",9; "twelve",12; "eight",8] in
    List.fold_left SISet.add SISet.empty els
  in
  let siset_str = SISet.tree_string siset in

  (* BEG_TEST *)
  let (s,i) as el = ("seven",7) in
  let initmsg = make_remove_msg (sprintf "(%s,%d)" s i) siset_str in
  let actual_str = (SISet.tree_string (SISet.remove siset el)) in
  let expect_str = "
   1: two is 2
 0: twelve is 12
     2: one is 1
       3: nine is 9
   1: five is 5
     2: eight is 8
"
  in
if not ( ( check_diff ~expect_str expect_file ~actual_str actual_file diff_file ~initmsg msgref )) then raise (TestFail {loc="test_treeset.ml:315"; msg=(!msgref); code="303:  let (s,i) as el = (\"seven\",7) in\n304:  let initmsg = make_remove_msg (sprintf \"(%s,%d)\" s i) siset_str in\n305:  let actual_str = (SISet.tree_string (SISet.remove siset el)) in\n306:  let expect_str = \"\n307:   1: two is 2\n308: 0: twelve is 12\n309:     2: one is 1\n310:       3: nine is 9\n311:   1: five is 5\n312:     2: eight is 8\n313:\"\n314:  in\n315:  __check_output__ ( check_diff  ~expect_str expect_file ~actual_str actual_file diff_file ~initmsg msgref );\n"}) else ();
  (* END_TEST *)
);

(fun () ->
  (* remove *)
  let module SIType = struct
      type element = string * int;;
      let compare = Pervasives.compare;;
      let elem_string (s,i) = sprintf "%s is %d" s i;;
    end
  in
  let module SISet = Treeset.Make(SIType) in
  let siset =
    let els = ["seven",7; "two",2; "five",5; "one",1; "nine",9; "twelve",12; "eight",8] in
    List.fold_left SISet.add SISet.empty els
  in
  let siset_str = SISet.tree_string siset in

  (* BEG_TEST *)
  let (s,i) as el = ("twelve",12) in
  let initmsg = make_remove_msg (sprintf "(%s,%d)" s i) siset_str in
  let actual_str = (SISet.tree_string (SISet.remove siset el)) in
  let expect_str = "
   1: two is 2
 0: seven is 7
     2: one is 1
       3: nine is 9
   1: five is 5
     2: eight is 8
"
  in
if not ( ( check_diff ~expect_str expect_file ~actual_str actual_file diff_file ~initmsg msgref )) then raise (TestFail {loc="test_treeset.ml:347"; msg=(!msgref); code="335:  let (s,i) as el = (\"twelve\",12) in\n336:  let initmsg = make_remove_msg (sprintf \"(%s,%d)\" s i) siset_str in\n337:  let actual_str = (SISet.tree_string (SISet.remove siset el)) in\n338:  let expect_str = \"\n339:   1: two is 2\n340: 0: seven is 7\n341:     2: one is 1\n342:       3: nine is 9\n343:   1: five is 5\n344:     2: eight is 8\n345:\"\n346:  in\n347:  __check_output__ ( check_diff  ~expect_str expect_file ~actual_str actual_file diff_file ~initmsg msgref );\n"}) else ();
  (* END_TEST *)

);

(fun () ->
  (* remove *)
  let module SIType = struct
      type element = string * int;;
      let compare = Pervasives.compare;;
      let elem_string (s,i) = sprintf "%s is %d" s i;;
    end
  in
  let module SISet = Treeset.Make(SIType) in
  let siset =
    let els = ["seven",7; "two",2; "five",5; "one",1; "nine",9; "twelve",12; "eight",8] in
    List.fold_left SISet.add SISet.empty els
  in
  let siset_str = SISet.tree_string siset in

  (* BEG_TEST *)
  let (s,i) as el = ("eighteen",18) in
  let initmsg = make_remove_msg (sprintf "(%s,%d)" s i) siset_str in
  let actual_str = (SISet.tree_string (SISet.remove siset el)) in
  let expect_str = "
   1: two is 2
     2: twelve is 12
 0: seven is 7
     2: one is 1
       3: nine is 9
   1: five is 5
     2: eight is 8
"
  in
if not ( ( check_diff ~expect_str expect_file ~actual_str actual_file diff_file ~initmsg msgref )) then raise (TestFail {loc="test_treeset.ml:381"; msg=(!msgref); code="368:  let (s,i) as el = (\"eighteen\",18) in\n369:  let initmsg = make_remove_msg (sprintf \"(%s,%d)\" s i) siset_str in\n370:  let actual_str = (SISet.tree_string (SISet.remove siset el)) in\n371:  let expect_str = \"\n372:   1: two is 2\n373:     2: twelve is 12\n374: 0: seven is 7\n375:     2: one is 1\n376:       3: nine is 9\n377:   1: five is 5\n378:     2: eight is 8\n379:\"\n380:  in\n381:  __check_output__ ( check_diff  ~expect_str expect_file ~actual_str actual_file diff_file ~initmsg msgref );\n"}) else ();
  (* END_TEST *)
);
|];;    
